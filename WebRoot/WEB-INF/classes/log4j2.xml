<?xml version="1.0" encoding="UTF-8"?>
<!-- log4j2使用说明（create By Shenlonghe    ）：
使用方式如下：
private static final Logger logger = LogManager.getLogger(实际类名.class);

2、日志说明：
（1）请根据实际情况配置各项参数
（2）需要注意日志文件备份数和日志文件大小，注意预留目录空间
（3）实际部署的时候backupFilePatch变量需要修改成linux目录
（4）级别DEBUG<INFO<WARN<ERROR<FATAL
 -->
<configuration status="error">
    <Properties>
   		<!-- 配置日志文件名称 -->
        <Property name="fileName">frontq.log</Property>
        <!-- 配置日志文件输出目录 -->
        <Property name="backupFilePatch">E:/log4g2/</Property>
      </Properties>
    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
             <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
<!--             <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY" /> -->
            <!--这个都知道是输出日志的格式-->
            <PatternLayout pattern="%d{HH:mm:ss} %-5level %class{36} %L %M - %msg%xEx%n" />
        </Console>
        
        <!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <!--
               %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
               %p : 日志输出格式
               %c : logger的名称
               %m : 日志内容，即 logger.info("message")
               %n : 换行符
               %C : Java类名
               %L : 日志输出所在行数
               %M : 日志输出所在方法名
               hostName : 本地机器名
               hostAddress : 本地ip地址
         -->
        <RollingFile name="RollingFile" fileName="${backupFilePatch}${fileName}"
            filePattern="${backupFilePatch}$${date:yyyy-MM}/app-%d{yyyyMMddHHmmssSSS}.log.gz">
            <PatternLayout pattern="%d{yyyy.MM.dd HH:mm:ss.SSS } %-5level %class{36} %L %M - %msg%xEx%n" />
            <!-- 日志文件大小 -->
            <SizeBasedTriggeringPolicy size="20KB" />
            <!-- 最多保留文件数 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        
        <RollingFile name="WarnFile" fileName="${backupFilePatch}warn.log"
            filePattern="${backupFilePatch}$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}.log">
            <PatternLayout pattern="%d{yyyy.MM.dd HH:mm:ss.SSS } %-5level %class{36} %L %M - %msg%xEx%n" />
            
            <Policies>
            	<!-- 按时间分割日志文件 -->
				<TimeBasedTriggeringPolicy interval="1" modulate="true"/>
			</Policies>
            <!-- 最多保留文件数 -->
            <DefaultRolloverStrategy max="30"/>
            <Filters>
				<ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
				<ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
			</Filters>
        </RollingFile>
    </appenders>
    
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--建立一个默认的root的logger-->
        <logger name="mylogs" level="all" additivity="true">
            <AppenderRef ref="RollingFile" level="all"/>
            <AppenderRef ref="WarnFile" level="all"/>
        </logger>
        <Root level="info">
            <AppenderRef ref="Console" />
        </Root>
        
        <!-- 第三方日志系统 -->
        <logger name="org.springframework.core" level="info"/>
        <logger name="org.springframework.beans" level="info"/>
        <logger name="org.springframework.context" level="info"/>
        <logger name="org.springframework.web" level="info"/>
        <logger name="org.jboss.netty" level="warn"/>
        <logger name="org.apache.http" level="warn"/>
    </loggers>
</configuration>